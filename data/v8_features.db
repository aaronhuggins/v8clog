{"name":"v8_features","options":{"prefix":"data/"},"index":{},"documents":[{"_id":"113","milestone":113,"name":"NO_FEATURES"},{"_id":"104","milestone":104,"name":"NO_FEATURES"},{"_id":"103","milestone":103,"name":"NO_FEATURES"},{"_id":"101","milestone":101,"name":"NO_FEATURES"},{"_id":"100","milestone":100,"name":"NO_FEATURES"},{"_id":"98","milestone":98,"name":"NO_FEATURES"},{"_id":"86","milestone":86,"name":"NO_FEATURES"},{"_id":"82","milestone":82,"name":"NO_FEATURES"},{"_id":"53","milestone":53,"name":"NO_FEATURES"},{"_id":"48","milestone":48,"name":"NO_FEATURES"},{"_id":"43","milestone":43,"name":"NO_FEATURES"},{"_id":"40","milestone":40,"name":"NO_FEATURES"},{"_id":"37","milestone":37,"name":"NO_FEATURES"},{"_id":"35","milestone":35,"name":"NO_FEATURES"},{"_id":"34","milestone":34,"name":"NO_FEATURES"},{"_id":"33","milestone":33,"name":"NO_FEATURES"},{"_id":"31","milestone":31,"name":"NO_FEATURES"},{"_id":"30","milestone":30,"name":"NO_FEATURES"},{"_id":"29","milestone":29,"name":"NO_FEATURES"},{"_id":"28","milestone":28,"name":"NO_FEATURES"},{"_id":"27","milestone":27,"name":"NO_FEATURES"},{"_id":"26","milestone":26,"name":"NO_FEATURES"},{"_id":"25","milestone":25,"name":"NO_FEATURES"},{"_id":"24","milestone":24,"name":"NO_FEATURES"},{"_id":"23","milestone":23,"name":"NO_FEATURES"},{"_id":"22","milestone":22,"name":"NO_FEATURES"},{"_id":"21","milestone":21,"name":"NO_FEATURES"},{"_id":"20","milestone":20,"name":"NO_FEATURES"},{"_id":"19","milestone":19,"name":"NO_FEATURES"},{"_id":"18","milestone":18,"name":"NO_FEATURES"},{"_id":"17","milestone":17,"name":"NO_FEATURES"},{"_id":"16","milestone":16,"name":"NO_FEATURES"},{"_id":"15","milestone":15,"name":"NO_FEATURES"},{"_id":"14","milestone":14,"name":"NO_FEATURES"},{"_id":"13","milestone":13,"name":"NO_FEATURES"},{"_id":"12","milestone":12,"name":"NO_FEATURES"},{"_id":"11","milestone":11,"name":"NO_FEATURES"},{"_id":"9","milestone":9,"name":"NO_FEATURES"},{"_id":"8","milestone":8,"name":"NO_FEATURES"},{"_id":"7","milestone":7,"name":"NO_FEATURES"},{"_id":"5102502917177344","category":"JavaScript","flag_name":"--harmony_iterator_helpers","id":5102502917177344,"milestone":117,"name":"Iterator helpers","summary":"Iterator helpers are new methods on iterator prototype to allow general usage and consumption of iterators."},{"_id":"5714791975878656","category":"JavaScript","flag_name":"--harmony-array-grouping","id":5714791975878656,"milestone":117,"name":"Array grouping","summary":"Adds news Object.groupBy(iterable, groupCallback) and Map.groupBy(iterable, groupCallback) to perform a grouping or bucketing operation. The Object method returns a plain object, where the groups are property keys. The Map method returns a Map, where the keys can be arbitrary values."},{"_id":"5073244152922112","category":"JavaScript","flag_name":"--harmony-rab-gsab-transfer","id":5073244152922112,"milestone":114,"name":"ArrayBuffer.prototype.transfer","summary":"Adds the ArrayBuffer.prototype.transfer method, which copies the receiver buffer, detaches the receiver, then returns the copy. This adds a JS API for what is possible via structured cloning.\r\n\r\nAlso adds ArrayBuffer.prototype.transferToFixedLength and the ArrayBuffer.prototype.detached getter.\r\n\r\nThis is a TC39 proposal."},{"_id":"5131077456232448","category":"JavaScript","flag_name":"Experimental WebAssembly","id":5131077456232448,"milestone":114,"name":"WebAssembly extended-const Proposal","summary":"We implement the WebAssembly extended-const proposal according to https://github.com/WebAssembly/extended-const.\r\nSpecifically, we add i32.add, i32.sub, i32.mul, i64.add, i64.sub and i64.mul to the list of constant instructions."},{"_id":"5186382643855360","category":"JavaScript","flag_name":"","id":5186382643855360,"milestone":114,"name":"Scrollend Event","summary":"Helps developers reliably tell when a scroll has completed (including both the scroll itself and any updates to offsets from the scroll) through event listeners. \r\n\r\nKnowing when a scroll has completed is useful for various reasons, e.g. synchronizing some logic on the snapped section, fetching stuff in a list, triggering new animations, etc.\r\nThis feature greatly simplifies the logic for handling end-of-scroll effects, ensuring that they are consistent across many different input modalities.  Currently, developers address this need by observing scroll events and building ad-hoc timeout algorithms."},{"_id":"5121582673428480","category":"JavaScript","flag_name":"--harmony-json-parse-with-source","id":5121582673428480,"milestone":114,"name":"JSON.parse source text access","summary":"This proposal adds an object with a \"source\" property that is passed as the 3rd argument to the reviver function in JSON.parse. This property contains the raw source text for the value being parsed.\r\n\r\nIt is designed to address the issue that JSON parsing is lossy, e.g. around BigInt values. For example, `JSON.parse(\" 9999999999999999\", (key, val, {source}) => BigInt(source))`."},{"_id":"5144156542861312","category":"JavaScript","flag_name":"--harmony-regexp-unicode-sets","id":5144156542861312,"milestone":112,"name":"RegExp v flag with set notation + properties of strings","summary":"Add set operations, string literals, nested classes and unicode properties of strings to regular expression character classes.\r\n\r\nSet operations and unicode properties of strings allow developers to create regular expressions matching strings with certain unicode characters with ease. E.g. /[\\p{Script_Extensions=Greek}&&\\p{Letter}]/v matches all greek letters."},{"_id":"5423405012615168","category":"WebAssembly","flag_name":null,"id":5423405012615168,"milestone":112,"name":"WebAssembly Tail Call","summary":"Add an explicit tail call and indirect tail call opcodes to WebAssembly.\r\n"},{"_id":"5200195346759680","category":"JavaScript","flag_name":"--harmony-string-is-well-formed","id":5200195346759680,"milestone":111,"name":"String.prototype.isWellFormed and toWellFormed","summary":"Add two String.prototype methods for working with well-formed UTF-16 strings.\r\n\r\nA JavaScript string value is well-formed UTF-16 if it has no unpaired surrogate code points. By default, JavaScript strings may be ill-formed.\r\n\r\n- String.prototype.isWellFormed returns whether the receiver string is well-formed UTF-16.\r\n\r\n- String.prototype.toWellFormed returns a string that is identical to the receiver string, except all unpaired surrogate code points are replaced with U+FFFD (REPLACEMENT CHARACTER)."},{"_id":"4668361878274048","category":"JavaScript","flag_name":"--harmony-rab-gsab","id":4668361878274048,"milestone":111,"name":"Resizable ArrayBuffer and growable SharedArrayBuffer","summary":"Extend the ArrayBuffer constructors to take an additional maximum length that allows in-place growth and shrinking of buffers. Similarly, SharedArrayBuffer is extended to take an additional maximum length that allows in-place growth."},{"_id":"6551852775112704","category":"JavaScript","flag_name":"","id":6551852775112704,"milestone":109,"name":"Trusted Types fromLiteral","summary":"Adds a function to each \"Trusted Type\" to create an instance from a JavaScript template literal (but not from a dynamically computed string). This makes it easy to mark literals in the JavaScript source text as \"trusted\".\r\n\r\nExample:\r\nconst html = TrustedHTML.fromLiteral`<p>Literal Text</p>`;"},{"_id":"5068609911521280","category":"JavaScript","flag_name":"--harmony-change-array-by-copy","id":5068609911521280,"milestone":110,"name":"Methods that change Array and TypedArray by copy","summary":"Provides additional methods on Array.prototype and TypedArray.prototype to enable changes on the array by returning a new copy of it with the change."},{"_id":"5133415903920128","category":"JavaScript","flag_name":"--enable-blink-features=SecurePaymentConfirmationOptOut","id":5133415903920128,"milestone":110,"name":"Secure Payment Confirmation - Opt-Out Support","summary":"Adds an 'opt-out' flow to Secure Payment Confirmation. When the (optional) input flag is set, the SPC UXes will render an 'opt-out' link of some sort that the user can interact with to indicate to the relying party that they wish to be opted out.\r\n\r\nSee https://github.com/w3c/secure-payment-confirmation/issues/172"},{"_id":"5680188671655936","category":"JavaScript","flag_name":"align-wakeups","id":5680188671655936,"milestone":107,"name":"Align Timers (including DOM timers) at 125 Hz","summary":"Run all timers (with a few exceptions) with a non-zero delay on a regular 8ms aligned wake up (125 Hz), instead of as soon as their delay has passed.\r\n\r\nThis affect DOM timers; On foreground pages, run DOM timers with a non-zero delay on a regular 8ms aligned wake up, instead of as soon as their delay has passed.\r\nOn background pages, DOM timers already run on a regular 1s aligned wake up (1 Hz), or even less frequently after 5 minutes."},{"_id":"5086507990777856","category":"JavaScript","flag_name":"","id":5086507990777856,"milestone":105,"name":"import.meta.resolve()","summary":"import.meta.resolve(specifier) returns the URL to which the given specifier would resolve in the context of the current script. That is, it returns the URL that would be imported if you did import(specifier)."},{"_id":"5710690097561600","category":"JavaScript","flag_name":"unthrottled-nested-timeout","id":5710690097561600,"milestone":108,"name":"Increased max nesting level for setTimeout(0)","summary":"Increase the nesting threshold before which setTimeout(..., <4ms) start being clamped, from 5 to 15.\r\n\r\nsetTimeout(..., 0) is commonly used to break down long Javascript tasks and let other internal tasks run, which prevents the browser from hanging. setTimeouts and setIntervals with an interval < 4ms are not clamped as aggressively as they were before. This improves short horizon performance, but websites abusing the API will still eventually have their set setTimeouts clamped\r\n\r\n\r\n"},{"_id":"5684908759449600","category":"JavaScript","flag_name":"--enable-experimental-web-platform-features","id":5684908759449600,"milestone":116,"name":"Back/forward cache NotRestoredReason API","summary":"NotRestoredReason API will report the list of reasons why a page is not served from BFcache in a frame tree structure, via PerformanceNavigationTiming API."},{"_id":"5707621009981440","category":"JavaScript","flag_name":"--harmony-intl-number-format-v3","id":5707621009981440,"milestone":106,"name":"Intl.NumberFormat v3 API","summary":"Intl.NumberFormat v3 API is a new TC39 ECMA402 stage 3 proposal extend the pre-existing Intl.NumberFormat, with the following new features:\r\n1. Add 3 new functions to format range of number:\r\nformatRange / formatRangeToParts / selectRange\r\n2. Grouping Enum\r\n3. New Rounding/Precision Options\r\n4. Rounding Priority\r\n5. Interpret Strings as Decimals\r\n6. Rounding Modes\r\n7. Sign Display Negative\r\nhttps://github.com/tc39/proposal-intl-numberformat-v3"},{"_id":"5693639729610752","category":"JavaScript","flag_name":"--harmony-array-find-last","id":5693639729610752,"milestone":97,"name":"Array and TypedArray findLast and findLastIndex","summary":"This is a Stage 3 TC39 proposal that adds the methods findLast and findLastIndex to Array.prototype and the various TypedArray.prototypes.\r\n\r\nThese methods are the \"from the end\" versions of find and findIndex."},{"_id":"5712146835963904","category":"JavaScript","flag_name":"ScriptElementSupports","id":5712146835963904,"milestone":97,"name":"HTMLScriptElement.supports(type) method","summary":"Provides a unified way to detect new features that use script elements."},{"_id":"5499765773041664","category":"WebAssembly","flag_name":"","id":5499765773041664,"milestone":97,"name":"WebAssembly Content Security Policy","summary":"Enhancements to Content Security Policy to improve interoperability with WebAssembly.\r\n"},{"_id":"5634523220934656","category":"JavaScript","flag_name":"","id":5634523220934656,"milestone":95,"name":"self.reportError()","summary":"This function, available in windows and workers, allows developers to report errors to the console and any global \"error\" event handlers, in the same way as an uncaught JavaScript exception. It is mainly useful for custom event-dispatching or callback-manipulating libraries."},{"_id":"4506375298220032","category":"JavaScript","flag_name":"harmony_intl_more_timezone","id":4506375298220032,"milestone":95,"name":"Extend Intl.DateTimeFormat timeZoneName Option","summary":"Add 4 new values \"shortGeneric\", \"longGeneric\", \"shortOffset\", and \"longOffset\" for Intl.DateTimeFormat timeZoneName option"},{"_id":"5082027281874944","category":"JavaScript","flag_name":"harmony_intl_displaynames_v2","id":5082027281874944,"milestone":95,"name":"Intl.DisplayNames v2","summary":"Extend the Intl.DisplayNames API to include \"calendar\" and \"dateTimeField\" names and add \"languageDisplay\" option.\r\nsee https://github.com/tc39/intl-displaynames-v2 for the proposal\r\nThe proposal advanced to Stage 3 on 2021-05-25\r\nSpec: https://tc39.es/intl-displaynames-v2/"},{"_id":"5650158039597056","category":"WebAssembly","flag_name":"","id":5650158039597056,"milestone":95,"name":"WebAssembly cross-origin module sharing","summary":"WebAssembly module sharing between cross-origin but same-site environments will be deprecated to allow agent clusters to be scoped to origins long term. This is a WebAssembly spec change, which has an impact on the platform as well.\r\n\r\nTherefore this deprecation is the first step to deprecate document.domain"},{"_id":"4756734233018368","category":"WebAssembly","flag_name":"","id":4756734233018368,"milestone":95,"name":"WebAssembly Exception Handling","summary":"This feature is adding exception support to WebAssembly. Exception handling allows code to break control flow when an exception is thrown. The exception can be any exception known by the WebAssembly module, or it may be an unknown exception that was thrown by a called imported function."},{"_id":"5662263404920832","category":"JavaScript","flag_name":"--harmony-object-has-own","id":5662263404920832,"milestone":93,"name":"Object.hasOwn","summary":"Object.hasOwn provides an easier-to-use, static method version of Object.prototype.hasOwnProperty. For example, Object.hasOwn({ prop:42 }, 'prop') returns true."},{"_id":"5727099325251584","category":"JavaScript","flag_name":null,"id":5727099325251584,"milestone":93,"name":"Error.cause property","summary":"Adds an additional options parameter to the Error() constructor with a cause property, the value of which will be assigned to the error instances as a property. This allows errors to be chained without unnecessary and overelaborate formalities on wrapping the errors in conditions."},{"_id":"5407573287108608","category":"JavaScript","flag_name":"--harmony_intl_best_fit_matcher","id":5407573287108608,"milestone":93,"name":"Intl BestFitMatcher by using ICU LocaleMatcher","summary":"Use the ICU LocaleMatcher to implement the BestFitMatcher of ECMA402  in v8 JavaScript engine.\r\nECMA402 defined the BestFitMatcher abstract operation to allow browser implementation to implement a better way to match locale data. \r\nUTS35 sec \"4.4 Language Matching\" details a data driven algorithm to use CLDR. ICU 67.1 (launched in April 2020) comes with an improved icu::LocaleMatcher API and implementation . This document shows how we implement v8's BestFitMatcher to use such API.\r\n\r\n\r\n"},{"_id":"5948572598009856","category":"JavaScript","flag_name":"--enable-blink-features=CSSModules","id":5948572598009856,"milestone":93,"name":"CSS module scripts","summary":"CSS Module Scripts are an extension of the ES Script Modules system that allows web developers to load CSS into a component definition in a manner that interacts seamlessly with other module types:\r\n\r\nimport styleSheet from \"./styles.css\" assert { type: \"css\" };\r\n"},{"_id":"5566859262820352","category":"JavaScript","flag_name":"harmony_intl_locale_info","id":5566859262820352,"milestone":99,"name":"Intl Locale Info in ECMA402","summary":"Intl Locale Info API is a new Stage ECMAScript TC39 proposal to enhance the Intl.Locale object by exposing Locale information, such as week data (first day in a week, weekend start day, weekend end day, minimun day in the first week), and text direction hour cycle used in the locale.\r\nhttps://github.com/tc39/proposal-intl-locale-info"},{"_id":"5670121114697728","category":"JavaScript","flag_name":"","id":5670121114697728,"milestone":89,"name":"`navigator.webdriver === false` when automation is not enabled.","summary":"Prior to this change, Chromium only exposed `navigator.webdriver` when the browser was being automated. However, other browsers expose it unconditionally per the spec (https://w3c.github.io/webdriver/#interface), with the value `false` in case the browser is not being automated. \r\n\r\nWe propose changing Chromium to align with other browsers and the spec. This is a potentially breaking change since web pages could in theory rely on the old `navigator.webdriver === undefined` behavior."},{"_id":"5767881411264512","category":"JavaScript","flag_name":"","id":5767881411264512,"milestone":89,"name":"Top-level await","summary":"Allow the `await` keyword at the top-level within JavaScript modules."},{"_id":"5315286962012160","category":"JavaScript","flag_name":"","id":5315286962012160,"milestone":89,"name":"Import maps","summary":"Import maps allows control over what URLs get fetched by JavaScript import statements and import() expressions."},{"_id":"6482797915013120","category":"JavaScript","flag_name":"","id":6482797915013120,"milestone":91,"name":"Class static initializer blocks","summary":"The classic static block proposal adds the ability for JavaScript classes to have one or more static initialization blocks. These blocks are initialized once per evaluation of the class definition.\r\n\r\n```\r\nclass C {\r\n  static s_field;\r\n  static {\r\n    this.s_field = doSomeInitialization();\r\n  }\r\n}\r\n```\r\n"},{"_id":"5006138707804160","category":"JavaScript","flag_name":"--harmony-staging","id":5006138707804160,"milestone":91,"name":"Ergonomic brand checks for private fields","summary":"This JavaScript feature adds the capability for testing the existence of a private field in an object: \"#foo in obj\"\r\n\r\nProposal: https://github.com/tc39/proposal-private-fields-in-in\r\n\r\nThe feature has reached Stage 3 in TC39.\r\n"},{"_id":"5749863620804608","category":"JavaScript","flag_name":"","id":5749863620804608,"milestone":91,"name":"JSON Modules","summary":"JSON modules allow statically importing JSON instead of consuming JSON dynamically through fetch().  JSON modules, like JavaSCript modules, are fetched using “cors” mode and strict MIME type checking. They also share the same module import syntax, for example: import data from \"./resource.json”."},{"_id":"6533147810332672","category":"JavaScript","flag_name":"","id":6533147810332672,"milestone":91,"name":"WebAssembly SIMD","summary":"WebAssembly SIMD will expose hardware SIMD instructions to WebAssembly applications in a platform-independent way. The SIMD proposal introduces a new 128-bit value type that can be used to represent different types of packed data, and several vector operations that operate on packed data. \r\n\r\nSIMD can boost performance by exploiting data level parallelism and is also useful when compiling native code to WebAssembly"},{"_id":"5823036655665152","category":"JavaScript","flag_name":"","id":5823036655665152,"milestone":102,"name":"[WebRTC] Deprecate and Remove Plan B","summary":"The SDP used to establish a connection in WebRTC has a non-standard dialect: Plan B. Removal timeline:\r\nM93: Exception thrown in Canary.\r\nM96: Exception thrown in Beta and Stable.\r\nM102: Prior to this version, Plan B was allowed behind Deprecation Trial. With M102, sdpSemantics is ignored (you get Unified Plan no matter what). CrOS-only: Plan B was temporarily allowed up until M104."},{"_id":"5685307493056512","category":"WebAssembly","flag_name":null,"id":5685307493056512,"milestone":102,"name":"WebAssembly Dynamic Tiering","summary":"With WebAssembly Dynamic Tiering, an heuristic decides which functions of a WebAssembly module get optimized, and when the optimization is triggered. This is an improvement to the existing eager optimization approach, where all functions get optimized immediately after baseline compilation is finished. WebAssembly Dynamic Tiering reduces the resource consumption of the optimizing compiler, and prevents the compiler from competing with the web application for resources."},{"_id":"5370811722498048","category":"JavaScript","flag_name":"","id":5370811722498048,"milestone":90,"name":"URL protocol setter: New restrictions for file URLs","summary":"Aligns behavior with the standard in edge cases when changing the URL protocol to or from \"file\".\r\n\r\nPreviously, attempting to change the protocol of a URL with credentials or a port to \"file\" would lead to an invalid URL. Similarly, attempting to change a URL with no host from \"file\" to \"http\" would lead to an invalid URL. Now the invalid change will be ignored for consistency with other browsers.\r\n\r\nThis affects the \"protocol\" attribute on the URL API, location, and <a> and <area> elements."},{"_id":"6558676666023936","category":"JavaScript","flag_name":"--harmony-regexp-match-indices","id":6558676666023936,"milestone":90,"name":"RegExp match indices","summary":"This proposal adds a new `.indices` property to the result array object returned by RegExp.prototype.exec and String.prototype.match. This property is an indices array containing a pair of start and end indices for each captured substring.\r\n\r\nAs producing this array is expensive, the `.indices` property is only present when the /d flag is passed."},{"_id":"6123640410079232","category":"JavaScript","flag_name":"--harmony-relative-indexing-methods","id":6123640410079232,"milestone":92,"name":"Relative indexing method for Array, String, and TypedArrays","summary":"Add a new method, named at(), to Array.prototype, String.prototype, and the TypedArray prototypes, that permit relative indexing with negative indices.\r\n\r\n```\r\nlet arr = [1,2,3,4];\r\narr.at(-1); // Returns 4\r\n```"},{"_id":"6520669959356416","category":"JavaScript","flag_name":"harmony_intl_dateformat_day_period","id":6520669959356416,"milestone":92,"name":"Add dayPeriod option for Intl.DateTimeFormat","summary":"Add a dayPeriod option to Intl.DateTimeFormat() method so the caller can format times such as \"7 in the morning\", \"11 in the morning\",  \"12 noon\", \"1 in the afternoon\", \"6 in the evening\", \"10 at night\" (or in Chinese, \"清晨7時\", \"上午11時\", \"中午12時\", \"下午1時\" ,\"下午6時\" ,\"晚上10時\")"},{"_id":"5171863141482496","category":"JavaScript","flag_name":"","id":5171863141482496,"milestone":88,"name":"Shared Array Buffers (SABs) on Android","summary":"Adds the JavaScript type SharedArrayBuffer to Android gated behind COOP/COEP. \r\nThe concept of a SharedArrayBuffer is that a message to a worker, is posted but instead of copying the content of the array just a reference to it is shared, so that all have the same view on the shared chunk of data in the memory.\r\n\r\nThis feature is only targeting Android - https://www.chromestatus.com/feature/4570991992766464 handles all other platforms"},{"_id":"5410592384876544","category":"JavaScript","flag_name":null,"id":5410592384876544,"milestone":88,"name":"RTCRtpTransceiver.stop()","summary":"Transceivers allow the sending and/or receiving of media in WebRTC. Stopping a transceiver makes it permanently inactive."},{"_id":"4592855228088320","category":"JavaScript","flag_name":null,"id":4592855228088320,"milestone":85,"name":"JavaScript logical assignment operators","summary":"Adds the logical assignment operators ||=, &&=, and ??= to JavaScript."},{"_id":"5574922384441344","category":"JavaScript","flag_name":null,"id":5574922384441344,"milestone":85,"name":"Promise.any and AggregateError","summary":"Promise.any() accepts an iterable of promises and returns a promise that is fulfilled by the first given promise to be fulfilled, or rejected with an AggregateError holding the rejection reasons if all of the given promises are rejected.\r\n\r\nAggregateError is a support class that aggregates one or more errors into a single object."},{"_id":"6040389083463680","category":"JavaScript","flag_name":null,"id":6040389083463680,"milestone":85,"name":"String.prototype.replaceAll","summary":"JavaScript now has first-class support for global substring replacement through the new `String.prototype.replaceAll()` method."},{"_id":"5695378309513216","category":"JavaScript","flag_name":"","id":5695378309513216,"milestone":85,"name":"Get Installed Related Apps API","summary":"The Get Installed Related Apps API (navigator.getInstalledRelatedApps) provides sites access to if their corresponding related applications are installed. Sites are only allowed to use this API if the native application has an established association with the web origin.\r\n\r\nThe API was launched in Chrome 80. You can find details here: https://web.dev/get-installed-related-apps/"},{"_id":"5648655109324800","category":"WebAssembly","flag_name":null,"id":5648655109324800,"milestone":85,"name":"WebAssembly BigInt Integration","summary":"Allow WebAssembly to import and export WebAssembly function parameters of type i64 using BigInt.\r\n"},{"_id":"6243382101803008","category":"JavaScript","flag_name":null,"id":6243382101803008,"milestone":87,"name":"Atomics.waitAsync","summary":"Adds Atomics.waitAsync, the async version of Atomics.wait. Atomics.waitAsync allows programmers to wait on a SharedArrayBuffer location in the same fashion as Atomics.wait but returns a Promise instead."},{"_id":"5354694014664704","category":"JavaScript","flag_name":null,"id":5354694014664704,"milestone":87,"name":"ontransition{run, start, cancel} event handler attributes","summary":"The ontransitionrun, ontransitionstart, and ontransitioncancel event handler attributes allow developers to add event listeners for 'transitionrun', 'transitionstart', and ‘transitioncancel' events on elements, Document objects, and Window objects.\r\n\r\nAn example of how this might be used:\r\n\r\n  target.ontransitioncancel = () => { console.log('transition was cancelled!'); }\r\n\r\n"},{"_id":"5719830432841728","category":"JavaScript","flag_name":"","id":5719830432841728,"milestone":87,"name":"Is-Input-Pending","summary":"This API enables developers to complete their work as fast as possible if the user isn't interacting, but respond to user input as fast as possible if input occurs."},{"_id":"6099397733515264","category":"JavaScript","flag_name":null,"id":6099397733515264,"milestone":87,"name":"Intl.Segmenter","summary":"Intl.Segmenter implements methods for finding the location of boundaries in text, including grapheme,word and sentence boundary analysis."},{"_id":"5298733486964736","category":"JavaScript","flag_name":"","id":5298733486964736,"milestone":87,"name":"Streams API: transferable streams","summary":"The streams APIs provide ubiquitous, interoperable primitives for creating, composing, and consuming streams of data. A natural thing to do with a stream is to pass it to a web worker. This provides a fluent primitive for offloading work to another thread. Transferable streams add this capability by allowing ReadableStream, WritableStream, and TransformStream objects to be passed as arguments to postMessage()."},{"_id":"6310316751192064","category":"JavaScript","flag_name":null,"id":6310316751192064,"milestone":84,"name":"ReportingObserver on workers","summary":"Expose ReportingObserver (https://www.chromestatus.com/feature/4691191559880704) to workers.\r\n\r\nThis has already been specified, but it was exposed only to Window because we didn't need it on workers.\r\n\r\nAs we are introducing new reports reported to workers we need to expose it to Worker too."},{"_id":"5126405660606464","category":"JavaScript","flag_name":null,"id":5126405660606464,"milestone":84,"name":"Web Animations API","summary":"Update the web animations JavaScript API to align with the specifications in https://drafts.csswg.org/web-animations-1/.\r\n\r\nThe Animation interface is extended to include support for promises, replaceable animations, and read-only access to the animation timeline.\r\n\r\nThe Animatable and DocumentOrShadowRoot interfaces are expanded to support getAnimations.\r\n\r\nThe KeyframeEffect interface is expanded to support compositing modes, getKeyframes, setKeyframes, and pseudoElement.\r\n"},{"_id":"5704965743968256","category":"JavaScript","flag_name":null,"id":5704965743968256,"milestone":84,"name":"fractionalSecondDigits option for Intl.DateTimeFormat","summary":"Enhances the Intl.DateTimeFormat API by adding a “ fractionalSecondDigits” option to control the format of fractions of a second.\r\n"},{"_id":"5700509656678400","category":"JavaScript","flag_name":null,"id":5700509656678400,"milestone":84,"name":"Private methods and accessors","summary":"Keeping state and behavior private to a class lets library authors present a clear, stable interface, while changing their code over time behind the scenes. The class fields proposal provides private fields for classes and instances, and this proposal builds on that by adding private methods and accessors (getter/setters) to JavaScript. With this proposal, any class element can be private.\r\n"},{"_id":"5892186633666560","category":"JavaScript","flag_name":null,"id":5892186633666560,"milestone":84,"name":"JavaScript weak references","summary":"Weak references enable JavaScript developers to create weak references to JavaScript objects.\r\n\r\nWeak references and finalizers help web developers define cleanup routines that don't keep the related objects alive but are (optionally) executed after the related object is garbage-collected."},{"_id":"5714474851893248","category":"JavaScript","flag_name":null,"id":5714474851893248,"milestone":81,"name":"IntersectionObserver Document Root","summary":"Allow the IntersectionObserver constructor to take a Document as the 'root' argument, causing intersections to be calculated against the scrolling viewport of the document."},{"_id":"4833112531927040","category":"JavaScript","flag_name":null,"id":4833112531927040,"milestone":81,"name":"Move onwebkit{animation,transition}XX handlers to GlobalEventHandlers","summary":"Currently, the prefixed onwebkit{animation,transition}XX handlers are only available on the Window object in Chrome. By the spec[0], these should be on GlobalEventHandlers[1] - i.e. available on HTMLElement, Document, and Window.\r\n\r\nNote that although standardized, these event handlers are still obsolete - web developers should use the non-prefixed versions instead!\r\n\r\n[0]: https://html.spec.whatwg.org/multipage/webappa\r\n\r\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers"},{"_id":"5642256117661696","category":"JavaScript","flag_name":null,"id":5642256117661696,"milestone":81,"name":"WorkerOptions for shared workers constructor","summary":"Adds the WorkerOptions object as the second argument for a shared worker constructor. The previous second argument, a DOMString containing the worker’s name is still supported."},{"_id":"5440098147500032","category":"JavaScript","flag_name":null,"id":5440098147500032,"milestone":81,"name":"Streams API: WritableStream close()","summary":"Add a close() method to WritableStream objects. This permits closing the stream if it is unlocked. It is directly equivalent to getting a writer, using the writer to close the stream, and then unlocking it again."},{"_id":"4965112605573120","category":"JavaScript","flag_name":null,"id":4965112605573120,"milestone":81,"name":"Intl.DisplayNames","summary":"Provides a new API to get localized names of language, region, script, currency codes of international standard as well as commonly used names of date fields and symbols. \r\n"},{"_id":"5127767286874112","category":"JavaScript","flag_name":null,"id":5127767286874112,"milestone":83,"name":"Replaceable animations","summary":"When a fill forward animation finishes, it remains in effect. If enough of these animations build up, they can negatively impact performance and leak memory.\r\n\r\nThere are 3 main parts to this feature:\r\n1) Automatically remove animations that no longer contribute to the effect stack and fire remove events.\r\n2) Animation.persist() to force an animation to remain that would otherwise be removed.\r\n3) Animation.commitStyle() to inject an inline style based on the current property values."},{"_id":"5169440012369920","category":"JavaScript","flag_name":null,"id":5169440012369920,"milestone":83,"name":"ES Modules for shared workers ('module' type option)","summary":"JavaScript will support modules in shared workers. Setting 'module' type by the constructor's type attribute, worker scripts are loaded as ES modules and the import statement is available on worker contexts. "},{"_id":"5663559390330880","category":"JavaScript","flag_name":null,"id":5663559390330880,"milestone":80,"name":"Nullish coalescing","summary":"Adds support for the 'nullish' operator to JS."},{"_id":"5855937971617792","category":"JavaScript","flag_name":null,"id":5855937971617792,"milestone":80,"name":"Compression Streams","summary":"Provides a means of performing gzip and deflate compression from JavaScript using streams. This covers two interfaces: CompressionStream and DecompressionStream."},{"_id":"5748330720133120","category":"JavaScript","flag_name":null,"id":5748330720133120,"milestone":80,"name":"JavaScript optional chaining","summary":"Provides safe access to descendent object members with parents that may or may not be null. This applies to objects as well as functions. For example, consider an object reference with three levels such as a.b.c. Testing for the existence of c would previously require nesting said test inside a test for b. This change allows you to test for c directly without an error being thrown when b is null."},{"_id":"5079977739419648","category":"JavaScript","flag_name":null,"id":5079977739419648,"milestone":80,"name":"RTCPeerConnection.setRemoteDescription() with \"rollback\"","summary":"Adds rollback, which is a way to cancel an on-going negotiation. This is needed if two WebRTC endpoints attempt to send an offer at the same time. In this case, one of the endpoints has to cancel its local offer by rolling back so that it can accept the incoming offer. This lets it complete the remote negotiation then create a follow-up offer after it becomes stable. Without it, negotiation cannot complete."},{"_id":"5440249461211136","category":"JavaScript","flag_name":null,"id":5440249461211136,"milestone":80,"name":"\"numberingSystem\" option for Intl.NumberFormat / \"calendar\" and \"numberingSystem\" option for Intl.DateTimeFormat ","summary":"Allows the calendar and numbering system to be specified in the options object of the DateTimeFormat() and NumberFormat() constructors.\r\n\r\n"},{"_id":"6511327140904960","category":"JavaScript","flag_name":"","id":6511327140904960,"milestone":80,"name":"Contacts API","summary":"Provides a way for websites to request information about the user’s contact(s) and provides a UI for the user to share those details in a way that makes it clear what is being shared with the website. This could be used for bootstrapping a friends list on a social network or (in an email/messaging application) to select message recipients."},{"_id":"5761300827209728","category":"JavaScript","flag_name":"","id":5761300827209728,"milestone":80,"name":"ES Modules for dedicated workers ('module' type option)","summary":"JavaScript will support modules in dedicated workers. Using a new value for the constructor's type attribute, worker scripts are loaded as ES modules and the import statement is available on worker contexts. With this feature, web developers can more easily write programs in a composable way and share them among a page and workers."},{"_id":"5989473649164288","category":"JavaScript","flag_name":null,"id":5989473649164288,"milestone":80,"name":"Don't allow popups during page unload","summary":"Pages may no longer use the window.open() API to open a new page during its unload.\r\n\r\nThe popup blocker already prohibits this, but now it is prohibited whether or not the popup blocker is enabled.\r\n\r\nEnterprises used to be able to use the AllowPopupsDuringPageUnload policy flag to allow popups during unload. We removed this flag in Chrome 88."},{"_id":"5192420329259008","category":"JavaScript","flag_name":"","id":5192420329259008,"milestone":80,"name":"WebAssembly Multi-Value","summary":"Add support for WebAssembly functions and blocks that return more than one value.\r\n"},{"_id":"5116796497559552","category":"JavaScript","flag_name":null,"id":5116796497559552,"milestone":79,"name":"Reject Worklet.addModule() with a more specific error","summary":"When Worklet.addModule() fails, a promise rejects with a more specific error object than it did previously.\r\n\r\nWorklet.addModule() can fail for various reasons, including, for example, network errors and syntax errors. Before this change, Worklet.addModule() rejected with AbortError regardless of the actual cause. That made it difficult for developers to debug worklets. After this change, Worklet.addModule() rejects with a clearer error such as SyntaxError."},{"_id":"6025903192670208","category":"JavaScript","flag_name":null,"id":6025903192670208,"milestone":79,"name":"Stop evaluating script elements moved between Documents during fetching","summary":"Do not evaluate scripts or fire error/load events, if <script> elements are moved between Documents during fetching.\r\n\r\nScript elements can be still moved between Documents, but they won't be executed."},{"_id":"5723155500892160","category":"JavaScript","flag_name":null,"id":5723155500892160,"milestone":77,"name":"RTCPeerConnection.restartIce()","summary":"Adds a method for triggering an ICE restart which causes a WebRTC connection to try to reconnect. This feature is already available in Chrome by passing the {iceRestart:true} argument to createOffer(). restartIce() is a version of this method that works regardless of signalingState."},{"_id":"5745988251680768","category":"JavaScript","flag_name":null,"id":5745988251680768,"milestone":77,"name":"Error serialization","summary":"Enables serialization of errors, specifically, DOMException, Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, and URIError. An example of where this capability may be used is to pass an Error to a worker using PostMessage()."},{"_id":"5730327525851136","category":"JavaScript","flag_name":null,"id":5730327525851136,"milestone":77,"name":"Support step timing functions jump-start|end|both|none","summary":"The step timing functions jump-both, jump-none, jump-start and jump-end were introduced to the spec for easing functions in 2018.  Two of these (jump-start and jump-end) are aliases for start and end. The remaining two provide increased flexibility for step transitions by enabling step functions in which both or neither endpoint has a discontinuous step. Previously, one and only one of the two endpoints could have a step discontinuity."},{"_id":"5430420699086848","category":"JavaScript","flag_name":null,"id":5430420699086848,"milestone":77,"name":"Intl.NumberFormat Unified API Proposal","summary":"This feature improves Intl.NumberFormat by adding support for measurement units, currency and sign display policies, and scientific and compact notation."},{"_id":"6276633918963712","category":"JavaScript","flag_name":null,"id":6276633918963712,"milestone":76,"name":"Animation.updatePlaybackRate","summary":"Animation.updatePlaybackRate() lets you seamlessly transition the playback rate of an animation such that there is no visible jump in the animation. Current time is preserved at the instance the new playback rate takes effect."},{"_id":"4843845109940224","category":"JavaScript","flag_name":null,"id":4843845109940224,"milestone":76,"name":"Implement Animation.pending","summary":"Adds the pending attribute to the Web Animations API.\r\n\r\nA pending animation is one that is waiting on an asynchronous operation that affects the play state. Adding support for this attribute does not affect the rendering or timing of animations, but simply exposes the signal.  \r\n\r\n"},{"_id":"5547381053456384","category":"JavaScript","flag_name":null,"id":5547381053456384,"milestone":76,"name":"Promise.allSettled","summary":"Adds Promise.allSettled(), which returns a promise that is fulfilled with an array of promise state snapshots, but only after all the original promises have settled, in other words after it has either fulfilled or rejected.\r\n\r\n"},{"_id":"5742274625404928","category":"JavaScript","flag_name":null,"id":5742274625404928,"milestone":76,"name":"Locale sensitive BigInt.prototype.toLocaleString and allow Intl.NumberFormat format/formatToParts to take BigInt.","summary":"Changes BigInt.prototype.toLocaleString() to locale-sensitive number formatting and changes Intl.NumberFormat.prototype.format() and formatToParts() to accept BigInt as input."},{"_id":"5077134515109888","category":"JavaScript","flag_name":null,"id":5077134515109888,"milestone":76,"name":"Intl.DateTimeFormat.prototype.formatRange","summary":"Adds formatRange() and formatRangeToParts() methods to Intl.DateTimeFormat to format a range of times between two dates, such as 'Jan 10 – 20, 2007', or 'Jan 10 – Feb 20, 2007'."},{"_id":"5091631933947904","category":"JavaScript","flag_name":null,"id":5091631933947904,"milestone":76,"name":"DateTimeFormat dateStyle and timeStyle ","summary":"Adds dateStyle and timeStyle options to functions on Intl.DateTimeFormat, specifically formatToParts() and resolveOptions(). These options provide a compact way to request the appropriate, locale-specific date and time of given length styles. "},{"_id":"5085886951718912","category":"JavaScript","flag_name":null,"id":5085886951718912,"milestone":75,"name":"RTCIceTransport","summary":"Provides information about the state of the ICE transports used by RTCPeerConnection to send and receive media to another endpoint."},{"_id":"4590306448113664","category":"JavaScript","flag_name":null,"id":4590306448113664,"milestone":75,"name":"WebAssembly Bulk Memory Operations","summary":"Adds a memmove type opcode to WebAssembly and enhances existing data sections to support importable base.This allows better optimization of large memcpy/memmove operations. Data section improvement will make shared libraries work better, especially with threads.\r\n"},{"_id":"4611843511287808","category":"JavaScript","flag_name":null,"id":4611843511287808,"milestone":75,"name":"WebAssembly Non-trapping Conversion","summary":"Adds opcodes to WebAssembly to support non-trapping float-to-integer conversion to improve the ergonomics of the bytecode format.\r\n"},{"_id":"5829906369871872","category":"JavaScript","flag_name":null,"id":5829906369871872,"milestone":75,"name":"Numeric separators","summary":"This feature enables developers to make their numeric literals more readable by creating a visual separation between groups of digits. Using underscores (_, U+005F) as separators helps improve readability for numeric literals, for ex: 1_000_000_000."},{"_id":"6031161734201344","category":"JavaScript","flag_name":"--enable-blink-features=WebScheduler","id":6031161734201344,"milestone":94,"name":"Scheduling APIs: Prioritized scheduler.postTask","summary":"Userspace tasks often have varying degrees of importance (related to user experience), but the Platform lacks a unified API to schedule prioritized work. The postTask API allows developers to schedule tasks (javascript callbacks) with a native browser scheduler at 3 levels of priority: user-blocking, user-visible, and background. It also exposes a TaskController, which can be used to dynamically cancel tasks and change their priority."},{"_id":"5134505706782720","category":"JavaScript","flag_name":null,"id":5134505706782720,"milestone":74,"name":"Hashbang interpreter line","summary":"Allows the first line of a script or module source file to specify an interpreter to evaluate the script.\r\n\r\ne.g.\r\n\r\n```\r\n#!/path/to/v8/v8-shell\r\nprint('Hello, world!');\r\n```"},{"_id":"6035156464828416","category":"JavaScript","flag_name":null,"id":6035156464828416,"milestone":74,"name":"Private class fields","summary":"This feature introduces private fields to classes in ECMAScript.\r\n\r\nNote: This entry only pertains to the private fields part of the proposal, not the public fields."},{"_id":"4936310187884544","category":"JavaScript","flag_name":null,"id":4936310187884544,"milestone":74,"name":"Intl.Locale","summary":"Intl.Locale class allows the following:\r\nParsing and manipulating the language, region and script of a locale; \r\nReading or writing the Unicode extension tags in a locale;\r\nStoring user locale preferences for this API in a serializable, standard format (rather than using a combination of language and the options object)."},{"_id":"5878481493688320","category":"JavaScript","flag_name":"","id":5878481493688320,"milestone":74,"name":"IntersectionObserver V2","summary":"Augment IntersectionObserver to report information about occlusion and visual effects.\r\n\r\nCurrently, IntersectionObserver does not consider whether a target element has been painted over (“occluded”) by other content or whether any visual effects have been applied which may alter or obscure the element’s display. This change adds a boolean field to IntersectionObserverNotification, indicating whether the UA can guarantee that the target will be displayed unoccluded and without visual effects."},{"_id":"5190687460950016","category":"JavaScript","flag_name":"","id":5190687460950016,"milestone":74,"name":"Feature Policy: JavaScript API","summary":"A JavaScript API will be exposed for feature policy. This API contains three functions. \r\n\r\ndocument.featurePolicy.allowedFeatures() // What are the allowed features in this document?\r\ndocument.featurePolicy.allowsFeature('geolocation', <origin>?) // Is geolocation allowed in this document or origin?\r\ndocument.featurePolicy.getAllowlistForFeature('geolocation') // What origins are allowed to use geolocation?"},{"_id":"5269288130707456","category":"JavaScript","flag_name":null,"id":5269288130707456,"milestone":73,"name":"Turn RTCRtpContributingSource from an interface into a dictionary","summary":"The specification requires RTCRtpContributingSource to be a dictionary, but it was previously shipped as an interface. With this change RTCRtpContributingSource will no longer have a prototype and getContributingSources() will create a new set of objects with each call."},{"_id":"5520028858318848","category":"JavaScript","flag_name":null,"id":5520028858318848,"milestone":73,"name":"RegExp String.prototype.matchAll()","summary":"String.prototype.matchAll() behaves similarly to String.prototype.match(), but returns a full regexp result object for each match in a global or sticky regexp. This offers a simple way to iterate over matches when access to, for example, capture groups is needed."},{"_id":"6208698208747520","category":"JavaScript","flag_name":null,"id":6208698208747520,"milestone":73,"name":"RTCRtpReceiver.getSynchronizationSources()","summary":"The getSynchronizationSources() method returns the latest playout timestamps of RTP packets for audio and video receivers. This is useful for determining in real time which streams are active, such as for the use case of audio meters or prioritizing displaying active participant streams in the UI."},{"_id":"5747878282657792","category":"JavaScript","flag_name":null,"id":5747878282657792,"milestone":73,"name":"Object.fromEntries()","summary":"Object.fromEntries() turns a list of key-value pairs into an object."},{"_id":"6228189936353280","category":"JavaScript","flag_name":null,"id":6228189936353280,"milestone":70,"name":"Rename Atomics.wake() to Atomics.notify()","summary":"The Atomics.wake() method is being renamed Atomics.notify(). This is a low-level function to wake a Worker that has been suspended via Atomics.wait(). This conforms to a specification change made to alleviate confusion created by the similarity of the names wait and wake."},{"_id":"4594144336936960","category":"JavaScript","flag_name":null,"id":4594144336936960,"milestone":70,"name":"'name' attribute for dedicated workers","summary":"This feature allows specifying the worker’s name in an optional constructor argument. This lets you distinguish dedicated workers by name when you have multiple workers with the same URL. Developers can print ‘name’ in the DevTools console which will make it easier to debug workers. When the ‘name’ param is omitted, an empty string is used as the default value. For more information, see the discussion at https://github.com/whatwg/html/issues/2477. "},{"_id":"5703243371905024","category":"JavaScript","flag_name":null,"id":5703243371905024,"milestone":70,"name":"Displaying a dialog will cause pages to lose fullscreen","summary":"Dialogs (e.g. authentication prompts, payments, filepickers) require proper context for users to make decisions. Fullscreen, by definition is immersive, and removes the context that a user needs to make a decision.\r\n\r\nTherefore, whenever a page causes a dialog to be shown, that page will lose any HTML5 fullscreen that it has entered."},{"_id":"5340787290144768","category":"JavaScript","flag_name":null,"id":5340787290144768,"milestone":70,"name":"Symbol.prototype.description","summary":"A description property is being added to Symbol.prototype. This provides a more ergonomic way of accessing the description of a Symbol. Previously, the description could be only be accessed indirectly through the Symbol.protoype.toString().\r\n"},{"_id":"5699859591987200","category":"JavaScript","flag_name":null,"id":5699859591987200,"milestone":70,"name":"RTCPeerConnection.id (Origin Trial)","summary":"RTCPeerConnection.id provides a string that identifies an RTCPeerConnection. This is useful when a peer connection needs to be referenced outside the JavaScript context, for example, on the server side, or by a logging mechanism."},{"_id":"4775088607985664","category":"JavaScript","flag_name":null,"id":4775088607985664,"milestone":70,"name":"Intervention: Disable scripts for Data Saver users on slow connections","summary":"If a Data Saver user is on a 2G-speed or slower network according to the NetInfo API, Chrome disables scripts and sends an intervention header on every resource request. Users are shown a Lite Mode UI in the omnibox. Users can enable scripts on the page by  tapping “Show original” in the omnibox UI. An intervention report is sent when this optimization occurs."},{"_id":"4764538272481280","category":"JavaScript","flag_name":null,"id":4764538272481280,"milestone":72,"name":"Intl.ListFormat","summary":"Intl.ListFormat helps libraries and frameworks format a list in a localized fashion by providing internationalized messages using a customary local word or phrase when available. For example, calling its format() method with [\"Alice\", \"Bob\", \"Charlie\", \"Delta\"] returns the string \"Alice, Bob, Charlie, and Delta\" in English."},{"_id":"6439734029058048","category":"JavaScript","flag_name":null,"id":6439734029058048,"milestone":72,"name":"ECMAScript module namespace exports","summary":"This feature extends the existing syntax for module exports by the form\r\n\r\n  export * as foo from \"bar\"\r\n\r\nwhich is the analogue to the existing form\r\n\r\n  import * as foo from \"bar\"\r\n\r\n\r\n"},{"_id":"5752304045129728","category":"JavaScript","flag_name":null,"id":5752304045129728,"milestone":72,"name":"Well-formed JSON.stringify","summary":"A Stage 3 ECMAScript proposal changes JSON.stringify to prevent it from returning ill-formed Unicode strings.\r\n\r\nPreviously, JSON.stringify would output lone surrogates if the input contained any lone surrogates:\r\n\r\n```\r\n    JSON.stringify(\"\\uD800\");\r\n    // --> '\"�\"'\r\n```\r\n\r\nWith this change, JSON.stringify outputs escape sequences for lone surrogates, making its output valid Unicode (and representable in UTF-8):\r\n\r\n```\r\n    JSON.stringify(\"\\uD800\");\r\n    // --> '\"\\ud800\"'\r\n```"},{"_id":"6001727933251584","category":"JavaScript","flag_name":null,"id":6001727933251584,"milestone":72,"name":"Public class fields","summary":"This feature introduces public fields to classes in ECMAScript.\r\n\r\nclass MyClass {\r\n    instanceProperty = 0;\r\n    static staticProperty = 0;\r\n}"},{"_id":"4875177569550336","category":"JavaScript","flag_name":null,"id":4875177569550336,"milestone":71,"name":"Intl.RelativeTimeFormat","summary":"Intl.RelativeTimeFormat helps libraries and frameworks format relative time in a localized fashion by providing internationalized messages for date and time fields, using a customary local word or phrase when available. For example, calling its format() method with -5 and 'day' would return the string '5 days ago'.\r\n\r\nIntl.RelativeTimeFormat is available behind a flag in Firefox 58."},{"_id":"6027726842494976","category":"JavaScript","flag_name":null,"id":6027726842494976,"milestone":71,"name":"Remove prefixed WebKitAnimationEvent interface","summary":"The prefixed WebKitAnimationEvent interface will be removed. It is a non-standard alias for the widely supported AnimationEvent interface (https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent). For interoperability between browsers, web developers should use the standard AnimationEvent instead.\r\n\r\n"},{"_id":"6579769156042752","category":"JavaScript","flag_name":null,"id":6579769156042752,"milestone":71,"name":"Remove prefixed WebKitTransitionEvent interface","summary":"The  prefixed WebKitTransitionEvent interface will be removed. It is a non-standard alias for the widely supported TransitionEvent interface (https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent). For interoperability between browsers, web developers should use the standard TransitionEvent instead."},{"_id":"6571514765770752","category":"JavaScript","flag_name":null,"id":6571514765770752,"milestone":71,"name":"globalThis","summary":"`globalThis` enables a universal mechanism to access the global object even in strict functions or modules, regardless of the platform."},{"_id":"6012085880225792","category":"JavaScript","flag_name":null,"id":6012085880225792,"milestone":71,"name":"WebAssembly PostMessage","summary":"Extends WebAssembly to support PostMessage of WebAssembly.Module objects to Web Workers. To clarify, this is scoped to just Web Workers (same process, different thread), and not extended to cross-process scenarios (such as cross-origin postMessage, or shared web workers).\r\n\r\n"},{"_id":"5252265900244992","category":"JavaScript","flag_name":null,"id":5252265900244992,"milestone":71,"name":"Rename Intl.DateTimeFormat.prototype.formatToParts type \"dayperiod\" to \"dayPeriod\"","summary":"This change corrects a non-compliant type in the formatToParts implementation."},{"_id":"4881011259211776","category":"JavaScript","flag_name":null,"id":4881011259211776,"milestone":71,"name":"TextEncoderStream and TextDecoderStream APIs","summary":"Text encoding and decoding will support streams to enable you to easily convert streams of binary data to text and vice-versa. An example of its usefulness is with readable streams. With a non-stream Response object, response.Body.text() returns text. There is no equivalent for the ReadableStream returned by Response.Body, which can only return bytes. With the new API a streaming response body may be converted to text as so: Response.Body.pipeThrough(new TextDecoderStream())."},{"_id":"5652647952515072","category":"JavaScript","flag_name":null,"id":5652647952515072,"milestone":69,"name":"Deprecation Reports","summary":"A new feature of the Reporting API gives developers more insight into the functioning of their code on client machines. Deprecation reports allow deprecation warnings, currently only available in developer tool consoles, to be sent to the back end, or captured in callbacks using ReportingObserver."},{"_id":"6206698196828160","category":"JavaScript","flag_name":null,"id":6206698196828160,"milestone":69,"name":"RTCRtpSender / RTCRtpReceiver.getCapabilities()","summary":"The getCapabilities() method returns the most optimistic view of the capabilities of the system for sending media of the given kind. It does not reserve any resources, ports, or other state but is meant to provide a way to discover the types of capabilities of the browser including which codecs or RTP extensions may be supported."},{"_id":"6675724865896448","category":"JavaScript","flag_name":null,"id":6675724865896448,"milestone":69,"name":"Add RTCRtpParameters.headerExtensions","summary":"This change adds support for the RTCRtpParameters.headerExtensions dictionary entry which is returned by RTCRtpSender.getParameters(). This is a read-only field that allows inspection of the parameters that are set on a PeerConnection after negotiation. "},{"_id":"5140698722467840","category":"JavaScript","flag_name":null,"id":5140698722467840,"milestone":69,"name":"window.confirm() will not activate parent page","summary":"If a document in a background tab calls window.confirm() then the call to confirm() will return immediately with false, and no dialog will be shown to the user. If the tab is active, then the call will show a dialog. Specifically, this removes the ability to use window.confirm() to bring a tab to the front against the user’s will.\r\n"},{"_id":"5185332291043328","category":"JavaScript","flag_name":null,"id":5185332291043328,"milestone":69,"name":"Remove document.createTouchList","summary":"The document.createTouchList() method is being removed because the Touch() constructor has been supported since Chrome 48."},{"_id":"4961472689995776","category":"JavaScript","flag_name":null,"id":4961472689995776,"milestone":69,"name":"WebAssembly Sign Extension Opcodes","summary":"Add sign extension opcodes to WebAssembly. This makes some code sequences shorter and allows us to provide only zero extended versions of atomic opcodes for threads.\r\n"},{"_id":"4749621767176192","category":"JavaScript","flag_name":null,"id":4749621767176192,"milestone":69,"name":"WebRTC RTCRtpTransceiver in Unified Plan","summary":"When spec-complaint SDP format \"Unified Plan\" is used, RTCRtpTransceiver describes each sender-receiver pair that is added to the RTCPeerConnection. This represents the components used to send and receive media. Exposing the transceiver gives the application the ability to receive media early and provides more control over the generated SDP. APIs that are shipping include RTCRtpTransceiver, RTCPeerConnection.addTransceiver() and RTCPeerConnection.getTransceivers()."},{"_id":"5754634769530880","category":"JavaScript","flag_name":null,"id":5754634769530880,"milestone":69,"name":"WebAssembly Import/Export Mutable Globals","summary":"Allows WebAssembly modules to import and export mutable globals. This building block will allow efficient passing of values like shadow stacks pointers between dynamically liked modules (especially in the multi-threaded case).\r\n"},{"_id":"6629507075145728","category":"JavaScript","flag_name":null,"id":6629507075145728,"milestone":69,"name":"Array.prototype.{flat,flatMap}","summary":"JavaScript arrays are getting two new methods. `Array.prototype.flat()` returns a new array with all sub-array elements concatenated into it recursively up to the specified depth. The sub-array elements become members of the new array. `Array.prototype.flatMap()` first maps each element using a mapping function, then flattens the result into a new array. This method is functionally equivalent to a map followed by a flatten of depth 1."},{"_id":"4691191559880704","category":"JavaScript","flag_name":null,"id":4691191559880704,"milestone":69,"name":"ReportingObserver","summary":"A new feature of the Reporting API gives developers more insight into the functioning of their code on client machines. The ReportingObserver API allows JavaScript to capture reports in callback, which can be used to save custom reporting data to page analytics."},{"_id":"4664843055398912","category":"JavaScript","flag_name":"","id":4664843055398912,"milestone":78,"name":"Disallow sync XHR in page dismissal","summary":"Chrome now disallows synchronous XHR during page dismissal when the page is being navigated away from or closed by the user. This involves the following events (when fired on the path of page dismissal): beforeunload, unload, pagehide, and visibilitychange.\r\n\r\nA temporary opt-out is available via Origin Trial \"Allow Sync XHR In Page Dismissal\":\r\nhttps://developers.chrome.com/origintrials/#/trials/active"},{"_id":"5725002447978496","category":"WebAssembly","flag_name":null,"id":5725002447978496,"milestone":78,"name":"WebAssembly Type Reflection JS API","summary":"Expands the JavaScript API surface of WebAssembly to allow reflection on the data types of functions imported and exported from a WebAssembly module.\r\n"},{"_id":"6383899018002432","category":"JavaScript","flag_name":null,"id":6383899018002432,"milestone":68,"name":"Worklet: Credentials mode defaults to \"same-origin\"","summary":"Worklet's credentials mode is specified by WorkletOptions on addModule(). Before this change, \"omit\" is the default credentials mode. This update changes the default credentials mode to \"same-origin\"."},{"_id":"5678876931915776","category":"JavaScript","flag_name":null,"id":5678876931915776,"milestone":68,"name":"RTCRtpSender: get/setParameters()","summary":"The get/setParameters() methods return or update the RTCRtpSender object's current parameters for how the RTCRtpSender.track property is encoded and transmitted to a remote RTCRtpReceiver. These methods enable you to change encoding parameters for WebRTC streams such as the maximum transmission bitrate without doing any SDP munging or renegotiation."},{"_id":"5644602711212032","category":"JavaScript","flag_name":null,"id":5644602711212032,"milestone":68,"name":"Page Lifecycle API","summary":"With large numbers of web apps (and tabs) running, critical resources such as memory, CPU, battery, network etc easily get oversubscribed, leading to a bad end user experience. Web lifecycle is a proposal to enable system initiated Tab Discarding and CPU Stopping -- to effectively manage resources for optimal user experience.\r\nSee explainer:\r\nhttps://github.com/spanicker/web-lifecycle/blob/master/README.md"},{"_id":"5675755719622656","category":"JavaScript","flag_name":null,"id":5675755719622656,"milestone":68,"name":"Block tab-under navigations","summary":"A tab-under is when a page both opens a popup to some destination (usually where the user wants to go) AND navigates the opener page to some third party content (usually an advertisement).\r\n\r\nChrome will block these navigations and show native UI to the user so they can follow the redirect just in case."},{"_id":"5668612064935936","category":"JavaScript","flag_name":null,"id":5668612064935936,"milestone":68,"name":"Remove document.createTouch","summary":"Remove document.createTouch\r\n\r\nUsing new Touch({...}) has been supported in Chrome since M48."},{"_id":"5851021045661696","category":"JavaScript","flag_name":null,"id":5851021045661696,"milestone":68,"name":"Require user gesture for framebusting in cross-origin iframes","summary":"Summary\r\nContent in an <iframe> can generally navigate the top level browsing context unless explicitly forbidden by the sandbox attribute (sometimes called 'framebusting'). Restrict this ability to content that is processing a user gesture, unless it is same-origin to the parent.\r\n\r\nMotivation\r\nFramebusting was originally used by content that wanted to prevent being placed in an <iframe> but it's being abused. There are other, more specific tools to accomplish the original use case."},{"_id":"5647724393267200","category":"JavaScript","flag_name":null,"id":5647724393267200,"milestone":67,"name":"RTCRtpSender/RTCRtpReceiver.getStats and RTCPeerConnection.getStats(MediaStreamTrack?)","summary":"New WebRTC implementations provided a filtered view of the statistics returned by getStats() in RTCRtpSender, RTCRtpReceiver, and RTCPeerConnection, returning only stats that are relevant to the sender, receiver, or track. This change adds convenience for developers by requiring less code for filtering. Because this is based on the spec it increases cross-browser compatibility. "},{"_id":"5371603852460032","category":"JavaScript","flag_name":null,"id":5371603852460032,"milestone":67,"name":"BigInt: arbitrary-precision integers","summary":"JavaScript gets a new numeric primitive that provides support for arbitrary-precision integers. `Number`s in JavaScript are represented as double-precision floats, giving them limited precision. `BigInt`s, on the other hand, can safely store and operate on large integers even beyond the safe integer limit for `Number`s.\r\n"},{"_id":"5669923372138496","category":"JavaScript","flag_name":null,"id":5669923372138496,"milestone":67,"name":"Web Authentication API for Chrome","summary":"The Credential Management API (Chrome 51 and later) defined a framework for retrieving credentials, including semantics for creating, getting, and storing them. It did this through two credential types: PasswordCredential and FederatedCredential. The Web Authentication API adds a third credential type, PublicKeyCredential, which allows web applications to  create and use strong, cryptographically attested, and application-scoped credentials to strongly authenticate users."},{"_id":"6102319234023424","category":"JavaScript","flag_name":null,"id":6102319234023424,"milestone":66,"name":"ECMAScript ⊃ JSON","summary":"A Stage 3 proposal makes ECMAScript a syntactic superset of JSON by allowing line separator (U+2028) and paragraph separator (U+2029) in string literals."},{"_id":"5756742138855424","category":"JavaScript","flag_name":null,"id":5756742138855424,"milestone":66,"name":"Do not throw on unimplemented but valid keyframe-specific composite values.","summary":"By spec, the following should not throw even if additive/accumulative animations are not yet supported by the browser:\r\n\r\n// Currently throws on Chrome - should not!\r\nelement.animate(\r\n  [\r\n    { color: 'red', composite: 'accumulate' },\r\n    { color: 'blue', composite: 'add' }\r\n  ], 2000);\r\n);\r\n\r\nFirefox does not throw in this case."},{"_id":"4790066333351936","category":"JavaScript","flag_name":null,"id":4790066333351936,"milestone":66,"name":"String.prototype.trimStart / String.prototype.trimEnd","summary":"Until now, String.prototype.{trimLeft,trimRight} were non-standard language extensions, required for Web compatibility.\r\n\r\nThe Stage 3 proposal at https://github.com/tc39/proposal-string-left-right-trim standardizes this functionality as String.prototype.{trimStart,trimEnd}, and defines String.prototype.{trimLeft,trimRight} as aliases for backwards compatibility.\r\n\r\nThis patch implements that proposal behind the --harmony-string-trimming flag."},{"_id":"4755812090118144","category":"JavaScript","flag_name":null,"id":4755812090118144,"milestone":66,"name":"Array.prototype.values","summary":"The values() method returns a new Array Iterator object that contains the values for each index in the array.\r\n\r\nvar"},{"_id":"5732193850621952","category":"JavaScript","flag_name":null,"id":5732193850621952,"milestone":66,"name":"window.focus() exits HTML5 fullscreen","summary":"If a page in fullscreen mode opens a popup and calls window.focus(), that page will exit full screen. This will not occur if the popup receives focus some other way."},{"_id":"5810795665424384","category":"JavaScript","flag_name":null,"id":5810795665424384,"milestone":66,"name":"Optional catch binding","summary":"This proposal allows the `catch` clause to exist without a parameter."},{"_id":"5666372071718912","category":"JavaScript","flag_name":null,"id":5666372071718912,"milestone":66,"name":"Function.prototype.toString revision","summary":"The \"implementation-dependent String\" returned from Function.prototype.toString() is now a fully-specified String, which is a substring of the source code that defines the function. For example, this preserves whitespace and comments between the \"function\" keyword and the function name identifier.\r\n\r\nFor functions created with CreateDynamicFunction (such as through `new Function()`), the String is fully-specified and includes the parameters passed to CreateDynamicFunction."},{"_id":"5700232381726720","category":"JavaScript","flag_name":null,"id":5700232381726720,"milestone":65,"name":"RTCRtpSender.replaceTrack","summary":"This allows you to seamlessly change which track is being sent without having to renegotiate at the expense of another offer/answer cycle.\r\nFor example, you might want to switch which video to send or to temporarily not send video, without any disruption in audio or at the cost of an RTT delay. It can also be used to control whether or not to send with replaceTrack(null)."},{"_id":"5275637463908352","category":"JavaScript","flag_name":null,"id":5275637463908352,"milestone":65,"name":"Worklets","summary":"Worklets define a new javascript execution context which is designed to allow developers to write code which is intended to be run synchronously within the rendering engine, however independent of the main user javascript.\r\n\r\nThis feature was released in two stages. Worklets for paint were released in Chrome 65/Opera 52. Worklets for audio were released for Chrome 66/Opera 53."},{"_id":"6706900393525248","category":"JavaScript","flag_name":null,"id":6706900393525248,"milestone":64,"name":"Unicode property escapes in regular expressions","summary":"The Unicode Standard assigns various properties and property values to every symbol. For example, to get the set of symbols that are used exclusively in the Greek script, search the Unicode database for symbols whose Script property is set to Greek.\r\n\r\nUnicode property escapes are a new type of escape sequence available in regular expressions that have the `u` flag set. They enable querying the Unicode database for certain properties and values.\r\n\r\nE.g. `/\\p{Script=Greek}/u.test('π') === true`"},{"_id":"5637885046816768","category":"JavaScript","flag_name":null,"id":5637885046816768,"milestone":64,"name":"Deprecate and remove chrome.loadTimes","summary":"chrome.loadTimes() is a non-standardized API that enables collecting loading related metrics to understand performance in the real world. However the metrics there are now available as standardized APIs, so this API will be deprecated and removed.\r\n"},{"_id":"5653365786673152","category":"JavaScript","flag_name":null,"id":5653365786673152,"milestone":64,"name":"RegExp named captures","summary":"Named captures for ECMAScript regular expressions allow developers to create and refer to named capture groups."},{"_id":"6477774290157568","category":"JavaScript","flag_name":null,"id":6477774290157568,"milestone":64,"name":"window.alert() will not activate parent page","summary":"If a document in a background tab calls window.alert() then the call to alert() will return immediately; the dialog will be shown to the user when they switch to the tab. A UI indicator will be set so the user is aware of the pending alert dialog. This removes the ability to use window.alert() to bring a tab to the front against the user’s will."},{"_id":"5637509807603712","category":"JavaScript","flag_name":null,"id":5637509807603712,"milestone":64,"name":"import.meta","summary":"The `import.meta` meta-property provides a host-defined object which exposes context-specific metadata to a JavaScript module (e.g. the enclosing module's URL or associated <script> element)."},{"_id":"5686840812109824","category":"JavaScript","flag_name":null,"id":5686840812109824,"milestone":64,"name":"Intl.NumberFormat.prototype.formatToParts()","summary":"Intl.NumberFormat.prototype.formatToParts() is scheduled to be added to the ECMAScript Internationalization API specification (Ecma 402). It adds a method to format a number to a list of tokens and their types (e.g. minusSign, integer, decimal, fraction, currency, percentSign, etc).\r\n\r\nSee also the corresponding DateTimeFormat feature here: https://www.chromestatus.com/feature/6319456309477376"},{"_id":"5644723490390016","category":"JavaScript","flag_name":null,"id":5644723490390016,"milestone":64,"name":"RTCRtpSender","summary":"This feature tracks RTCPeerConnection methods getSenders(), addTrack(), removeTrack() and the essentials of interface RTCRtpSender."},{"_id":"4588025757564928","category":"JavaScript","flag_name":null,"id":4588025757564928,"milestone":62,"name":"Loosen up escape sequence restrictions in template literals","summary":"The restriction on escape sequences in template literals has been loosened. This enables new use cases for template tags, such as writing a LaTeX processor."},{"_id":"5668726032564224","category":"JavaScript","flag_name":null,"id":5668726032564224,"milestone":62,"name":"RegExp lookbehind assertions","summary":"Lookarounds are zero-width assertions that match a string without consuming anything. ECMAScript has lookahead assertions that does this in forward direction, but the language is missing a way to do this backward which the lookbehind assertions provide. With lookbehind assertions, one can make sure that a pattern is or isn't preceded by another, e.g. matching a dollar amount without capturing the dollar sign."},{"_id":"5644209772036096","category":"JavaScript","flag_name":null,"id":5644209772036096,"milestone":62,"name":"RegExp `dotAll` mode / `s` flag","summary":"The new `s` flag for ECMAScript regular expressions makes `.` match any character, including line terminators."},{"_id":"5727385018171392","category":"JavaScript","flag_name":null,"id":5727385018171392,"milestone":63,"name":"Async Iteration / Async Generators","summary":"Async Generator functions and a new iteration protocol (used by for-await-of loops and yield* expressions), to streamline consumption or implementation of streaming data sources."},{"_id":"5653874773852160","category":"JavaScript","flag_name":null,"id":5653874773852160,"milestone":63,"name":"Intl.PluralRules","summary":"Intl.PluralRules is a new API which exposes language-dependent data on pluralization forms of numbers. Given a locale and a number, Intl.PluralRules outputs a category, which can then be used for selection of the pluralization form of surrounding text."},{"_id":"5704570235781120","category":"JavaScript","flag_name":null,"id":5704570235781120,"milestone":63,"name":"Promise.prototype.finally","summary":"This finally method is used for registering a callback to be invoked when a promise is settled (either fulfilled, or rejected)."},{"_id":"5684934484164608","category":"JavaScript","flag_name":null,"id":5684934484164608,"milestone":63,"name":"JavaScript module import()","summary":"This JavaScript feature adds a \"function-like\" import() module loading syntactic form to JavaScript. \r\n\r\nThe existing syntactic forms for importing modules are static declarations. However, it's also desirable to be able to dynamically load parts of a JavaScript application at runtime."},{"_id":"5650461096935424","category":"JavaScript","flag_name":null,"id":5650461096935424,"milestone":61,"name":"Resource Timing & Navigation Timing: add nextHopProtocol property","summary":"nextHopProtocol has been in the spec for RT & NT but was not implemented in chrome yet.\r\nIt is now landed and will ship in M61"},{"_id":"5669548871122944","category":"JavaScript","flag_name":null,"id":5669548871122944,"milestone":61,"name":"JavaScript dialogs exit HTML5 fullscreen","summary":"If a page shows a JavaScript dialog while it is in fullscreen (the HTML5 kind), it is exited from fullscreen."},{"_id":"5365692190687232","category":"JavaScript","flag_name":null,"id":5365692190687232,"milestone":61,"name":"JavaScript modules: <script type=module>","summary":"JavaScript modules allow a program to be divided into multiple sequences of statements and declarations. Each module explicitly identifies declarations it uses that need to be provided by other modules and which of its declarations are available for use by other modules.\r\n\r\n<script type=module> allows loading of JavaScript modules inside web pages."},{"_id":"5053365658583040","category":"JavaScript","flag_name":null,"id":5053365658583040,"milestone":61,"name":"asm.js","summary":"Validate asm.js code and use type information to optimize the low-level subset of JavaScript."},{"_id":"5688621814251520","category":"JavaScript","flag_name":null,"id":5688621814251520,"milestone":60,"name":"First Paint Timing API","summary":"API to enable developers to measure time for First Paint (FP) & First Contentful Paint (FCP) -- the first key moments in loading that they care about. These moments are added as 'paint' entries in the Performance Timing API."},{"_id":"5082396709879808","category":"JavaScript","flag_name":null,"id":5082396709879808,"milestone":60,"name":"Require user gesture for beforeunload dialogs","summary":"The beforeunload dialog will only be shown if the frame attempting to display it has received a user gesture or user interaction (or if any embedded frame has received such a gesture). (There will be no change to the dispatch of the beforeunload event, just a change to whether the dialog is shown.)\r\n"},{"_id":"5657004848709632","category":"JavaScript","flag_name":null,"id":5657004848709632,"milestone":60,"name":"Object rest/spread properties","summary":"This introduces rest properties for object destructuring assignment and spread properties for object literals."},{"_id":"5715393821802496","category":"JavaScript","flag_name":null,"id":5715393821802496,"milestone":59,"name":"Partial RTCRtpReceiver and RTCRtpContributingSource support","summary":"The parts of the RTC Media API (https://w3c.github.io/webrtc-pc/#rtp-media-api) that allow keeping track of contributing sources for receiving tracks. RTCPeerConnection extension: getReceivers(). RTCRtpSender support: track, getContributingSources(). RTCRtpContributingSource support: timestamp, source.\r\n\r\nFeature for the rest of the API:\r\nhttps://www.chromestatus.com/feature/5347809238712320"},{"_id":"5738839242964992","category":"JavaScript","flag_name":null,"id":5738839242964992,"milestone":59,"name":"RTCPeerConnection.onicegatheringstatechange","summary":"This feature adds the icegatheringstatechange event and the onicegatheringstatechange event handler to RTCPeerConnection."},{"_id":"5643877683822592","category":"JavaScript","flag_name":null,"id":5643877683822592,"milestone":57,"name":"Add |timecode| to MediaRecorder's BlobEvent","summary":"MediaRecorder produces BlobEvents that have no timing information. [1] requested adding a DOMHighResTimestamp to said BlobEvent [2].  The Pull Request was reviewed and approved by the only two implementors of the said API, Gecko and Chrome.\r\n\r\n\r\n[1] https://github.com/w3c/mediacapture-record/issues/73\r\n[2] https://github.com/w3c/mediacapture-record/pull/95"},{"_id":"5637418589880320","category":"JavaScript","flag_name":null,"id":5637418589880320,"milestone":57,"name":"Remove MediaRecorder |ignoreMutedMedia|","summary":"After discussion in the W3C Spec Github [1], there is agreement to remove this feature (and its associated boolean attribute).  FF never shipped it [2], Chromium never wired its behaviour [3].\r\n\r\n[1] https://github.com/w3c/mediacapture-record/issues/99\r\n[2] https://github.com/mozilla/gecko-dev/blob/master/dom/webidl/MediaRecorder.webidl\r\n[3] https://cs.chromium.org/search/?q=m_ignoreMutedMedia&sq=package:chromium&type=cs"},{"_id":"6319456309477376","category":"JavaScript","flag_name":null,"id":6319456309477376,"milestone":57,"name":"Intl.DateTimeFormat.prototype.formatToParts()","summary":"Intl.DateTimeFormat.prototype.formatToParts() is scheduled to be added to the EcmaScript Internationalization API specification (Ecma 402). \r\n\r\nIt adds a method to format date and time to a list of tokens and their type (e.g. literal, day, year, month, hour, minute, era, etc). "},{"_id":"5694172086403072","category":"JavaScript","flag_name":null,"id":5694172086403072,"milestone":57,"name":"String.prototype.padStart() / String.prototype.padEnd()","summary":"String formatting tools which returns a target/receiver string prepended or appended with a repeating pattern of characters:\r\n\r\n\"foo\".padStart(10, \"0\"); -> \"0000000foo\";\r\n\"foo\".padEnd(10, \"0\");  ->  \"foo0000000\";\r\n"},{"_id":"5453022515691520","category":"JavaScript","flag_name":null,"id":5453022515691520,"milestone":57,"name":"WebAssembly","summary":"WebAssembly, or wasm, is an efficient low-level programming language for in-browser client-side execution. It is designed to support C/C++ and similar low-level languages. Future versions may be enhanced to better support other languages. WebAssembly is intended to be small, fast to decode, fast to compile, and fast to execute.\r\n"},{"_id":"5656834660630528","category":"JavaScript","flag_name":null,"id":5656834660630528,"milestone":58,"name":"Trailing comma in JavaScript function parameter lists","summary":"A small modification to JavaScript syntax allows trailing comma in formal parameter lists and in argument lists. For example, all the following become valid:\r\n\r\nfunction f(a, b,) { return a + b }\r\nlet g = (a, b,) => a + b\r\nf(1, 2,) + g(3, 4,)\r\n\r\nThis is expected to be available by default in Chrome 58.\r\n"},{"_id":"5665052275245056","category":"JavaScript","flag_name":null,"id":5665052275245056,"milestone":58,"name":"RTCPeerConnection.getStats","summary":"This is a spec-compliant version of RTCPeerConnection.getStats returning a promise resolved with RTCStatsReport, a maplike containing RTCStats dictionaries.\r\nStats are being implemented according to the spec in a continuous effort for coverage to become good enough that the old getStats method can be deprecated.\r\n\r\nThe old getStats (taking a callback as argument) is very different from the spec and riddled with goog-prefixed things."},{"_id":"5738471184400384","category":"JavaScript","flag_name":null,"id":5738471184400384,"milestone":58,"name":"Long Task API","summary":"A performance API to enable applications to detect presence of “long tasks” that monopolize the UI thread for extended periods of time and block other critical tasks from being executed - e.g. reacting to user input."},{"_id":"5637107137642496","category":"JavaScript","flag_name":null,"id":5637107137642496,"milestone":56,"name":"window.prompt() will not activate parent page","summary":"If a document in a background tab calls window.prompt() then the call to prompt() will return immediately, and no dialog will be shown to the user for that call to prompt(). If the tab is foremost (if it is the active tab in the front window), then the call will show a dialog. Specifically, this removes the ability to use window.prompt() to bring a tab to the front against the user’s will.\r\n"},{"_id":"5666580386021376","category":"JavaScript","flag_name":null,"id":5666580386021376,"milestone":54,"name":"Object.getOwnPropertyDescriptors()","summary":"Retrieve all own PropertyDescriptors from an object, which could be used by Object.create() or Object.defineProperties()."},{"_id":"5710160244768768","category":"JavaScript","flag_name":null,"id":5710160244768768,"milestone":54,"name":"Object.entries() and Object.values()","summary":"These methods are siblings to the Object.keys() function, and aim to provide Objects with the same set of iteration methods that exist for other ES2015 types (Array, Map, and Set)."},{"_id":"5643236399906816","category":"JavaScript","flag_name":null,"id":5643236399906816,"milestone":55,"name":"Async/await functions","summary":"Async functions make it easy to write code which needs to \"block\" on certain asynchronous events JavaScript. Async/await does this by providing a simpler and more ergonomic way to use Promises. To block on a value, use the 'await' keyword. Async/await can be implemented based on a desugaring to generators, as described in the following design doc: https://docs.google.com/document/d/1K38ct2dsxG_9OfmgErvFld4MPDC4Wkr8tPuqmSWu_3Y/edit?usp=sharing"},{"_id":"5461064690958336","category":"JavaScript","flag_name":null,"id":5461064690958336,"milestone":52,"name":"Exponentiation Operator (** / **=)","summary":"Provides an arithmetic operator equivalent of Math.pow(), in which the lefthand-side expression serves as the base value, and the righthand-side expression serves as the exponent."},{"_id":"5133084412346368","category":"JavaScript","flag_name":null,"id":5133084412346368,"milestone":51,"name":"ES2015 RegExp subclassing semantics","summary":"This feature allows RegExp subclasses to override RegExp.prototype.exec and flags to change the semantics of higher-level functionality, such as String.prototype.replace. Previous JavaScript versions always used the original value of exec from replace. This feature makes it easier to implement new RegExp subclasses by changing a single core piece, without duplicating the higher level integration logic."},{"_id":"5750902036103168","category":"JavaScript","flag_name":null,"id":5750902036103168,"milestone":51,"name":"Iterable Array-like DOM interfaces","summary":"Adds `Symbol.iterator` to any DOM interface containing an indexed property getter, and a \"length\" property, such as HTMLAllCollection, FileList or MediaList.\r\n\r\nThis enables their use in ECMAScript 6 for-of loops.\r\n"},{"_id":"4750327530127360","category":"JavaScript","flag_name":null,"id":4750327530127360,"milestone":51,"name":"Array subclassing and Symbol.species support","summary":"ES2015 changes the semantics of Arrays and certain other classes to create subclass instances from certain methods, and allow a new interception point, Symbol.species, to control whether it's actually the subclass or another class which is instantiated. For example, Array.prototype.map constructs instances of the subclass as its output, with the option to customize this by changing Symbol.species"},{"_id":"5349061406228480","category":"JavaScript","flag_name":null,"id":5349061406228480,"milestone":51,"name":"Custom messages in onbeforeunload dialogs","summary":"A window’s onbeforeunload property may be set to a function that returns a string. If the function returns a string, then before unloading the page, a dialog is shown to have the user confirm that they indeed want to navigate away.\r\n\r\nThe string provided by the function will no longer be shown in the dialog. Rather, a generic string not under the control of the webpage will be shown."},{"_id":"5135002249461760","category":"JavaScript","flag_name":null,"id":5135002249461760,"milestone":51,"name":"Function \"name\" property (ES6)","summary":"In ECMAScript 2015, the \"name\" property on anonymous Function objects is sometimes set based on the syntactic position of the function (or class) expression. For example:\r\n\r\nvar x = function() { };\r\nx.name === 'x'"},{"_id":"5690218174742528","category":"JavaScript","flag_name":null,"id":5690218174742528,"milestone":50,"name":"Symbol.hasInstance (ES6)","summary":"Symbol.hasInstance enables customizing the behavior of the 'instanceof' operator."},{"_id":"5850516236009472","category":"JavaScript","flag_name":null,"id":5850516236009472,"milestone":50,"name":"RegExp @@match, @@search, @@replace, @@split (ES6)","summary":"Support well-known symbols to enhance the Regex capabilities"},{"_id":"6147094632988672","category":"JavaScript","flag_name":null,"id":6147094632988672,"milestone":50,"name":"Object.observe()","summary":"Observe changes to JS objects."},{"_id":"5758145364230144","category":"JavaScript","flag_name":null,"id":5758145364230144,"milestone":49,"name":"Symbol.toStringTag (ES6)","summary":"Using Symbol.toStringTag, user-defined types can return customized output when passed to Object.prototype.toString (either directly or as a result of string coercion) by storing a descriptive string in a Symbol.toStringTag-keyed property."},{"_id":"6669539118940160","category":"JavaScript","flag_name":null,"id":6669539118940160,"milestone":49,"name":"WebRTC API for choosing key pair algorithm (RSA, ECDSA) for certificates used in DTLS handshake","summary":"A WebRTC JavaScript API is added to control the key pair algorithm (RSA, ECDSA) to use for the self-signed certificates generated when DTLS is used for peerconnections.\r\n\r\nChanges to API surface: RTCCertificate class added, RTCPeerConnection.generateCertificate static method added, RTCConfiguration.certificates (sequence<RTCCertificate>) member added.\r\n\r\nThis feature was behind a flag starting in Chrome 48 and Opera 35. Earlier, this feature was erroneously marked as shipping in M52"},{"_id":"6060641169178624","category":"JavaScript","flag_name":null,"id":6060641169178624,"milestone":49,"name":"Reflect (ES6)","summary":"Improved imperative methods for invoking, examining or modifying values at runtime."},{"_id":"4588790303686656","category":"JavaScript","flag_name":null,"id":4588790303686656,"milestone":49,"name":"Destructuring (ES6)","summary":"Destructuring assignment allows extracting data from arrays or objects using a syntax that mirrors array and object literals.\r\n\r\n"},{"_id":"4811188005240832","category":"JavaScript","flag_name":null,"id":4811188005240832,"milestone":49,"name":"Proxies (ES6)","summary":"Proxies are objects for which the programmer has to define the semantics in JavaScript. "},{"_id":"5275456790069248","category":"JavaScript","flag_name":null,"id":5275456790069248,"milestone":49,"name":"Default parameters (ES6)","summary":"Allows formal parameters to be initialized with default values if no value (or 'undefined') is passed."},{"_id":"5891733057437696","category":"JavaScript","flag_name":null,"id":5891733057437696,"milestone":49,"name":"Sloppy mode block bindings (let, class, const, function) (ES6)","summary":"Enable ES6-style block-scoped bindings including let and class in sloppy mode, and modify semantics of const and function to operate according to ES6 in sloppy mode."},{"_id":"5964420647747584","category":"JavaScript","flag_name":null,"id":5964420647747584,"milestone":47,"name":"Array.prototype.includes","summary":"Method to determine whether an array includes a given element."},{"_id":"5937087912083456","category":"JavaScript","flag_name":null,"id":5937087912083456,"milestone":47,"name":"Rest parameters (ES6)","summary":"Allows representation of an indefinite number of arguments as an array."},{"_id":"5210159227863040","category":"JavaScript","flag_name":null,"id":5210159227863040,"milestone":46,"name":"new.target (ES6)","summary":"new.target is a \"meta-property\" available in all functions. It refers to the constructor invoked by 'new' (if a construct call is underway) or undefined otherwise."},{"_id":"6031334694715392","category":"JavaScript","flag_name":null,"id":6031334694715392,"milestone":46,"name":"Spread (call and array) (ES6)","summary":"Spread calls allow an iterable expression to be spread into function arguments, similar to using Function.prototype.apply.\r\n\r\nSpread array allows an array literal to contain spread expressions which spreads the values of the iterator into the array."},{"_id":"5742083411279872","category":"JavaScript","flag_name":null,"id":5742083411279872,"milestone":45,"name":"Object.assign()","summary":"The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object."},{"_id":"4919908559224832","category":"JavaScript","flag_name":null,"id":4919908559224832,"milestone":45,"name":"ES6 TypedArray methods","summary":"Additional static methods on concrete TypedArray subclasses (Int8Array, Float32Array, etc) and instance methods on their prototypes. Includes most of the existing Array methods, as well as those added in ES6."},{"_id":"6732923508097024","category":"JavaScript","flag_name":null,"id":6732923508097024,"milestone":45,"name":"ES6 Array methods","summary":"Additional static methods on Array and instance methods on Array.prototype: Array.from, Array.of, Array.prototype.copyWithin, Array.prototype.fill, Array.prototype.find, Array.prototype.findIndex"},{"_id":"5047308127305728","category":"JavaScript","flag_name":null,"id":5047308127305728,"milestone":45,"name":"Arrow functions (ES6)","summary":"The arrow (=>) takes the place of the function keyword"},{"_id":"5654306493562880","category":"JavaScript","flag_name":null,"id":5654306493562880,"milestone":44,"name":"Computed Property Names (ES6)","summary":"Allows expression for property names in object literals and class literals"},{"_id":"4873630588600320","category":"JavaScript","flag_name":null,"id":4873630588600320,"milestone":42,"name":"ES6 Extended Object Literals","summary":"Allows concise methods and property shorthands in object literals"},{"_id":"4633745457938432","category":"JavaScript","flag_name":null,"id":4633745457938432,"milestone":42,"name":"Classes (ES6)","summary":"Language support for classes.\r\n\r\nIn 42, shipped in strict mode. In 49, shipped outside of strict mode as well."},{"_id":"4645595339816960","category":"JavaScript","flag_name":null,"id":4645595339816960,"milestone":41,"name":"Lexical Declarations (ES6)","summary":"'let' and 'const' declarations define variables/constants with block scoping in strict mode."},{"_id":"4743002513735680","category":"JavaScript","flag_name":null,"id":4743002513735680,"milestone":41,"name":"Template Strings (ES6)","summary":"Template strings are string literals allowing embedded expressions."},{"_id":"4930171014479872","category":"JavaScript","flag_name":null,"id":4930171014479872,"milestone":41,"name":"ES6 numeric literals","summary":"Allows binary and octal numeric literals using 0b101 and 0o753 respectively."},{"_id":"5920790725787648","category":"JavaScript","flag_name":null,"id":5920790725787648,"milestone":38,"name":"Math functions (ES6)","summary":"Math related functions - sign, trunc, sinh, cosh, tanh, asinh, acosh, atanh, log10, log2, hypot, fround, clz32, cbrt, log1p, expm1 (as Math.sign(...), Math.trunc(...) and so on)."},{"_id":"4543115071324160","category":"JavaScript","flag_name":null,"id":4543115071324160,"milestone":38,"name":"Unscopables (ES6)","summary":"Unscopables allows properties to be hidden to with statement lookup rules. This is important for adding new properties to existing objects both in JavaScript and in DOM."},{"_id":"6042091272536064","category":"JavaScript","flag_name":null,"id":6042091272536064,"milestone":38,"name":"Symbols (ES6)","summary":"Allows properties to be added to existing objects without the possibility of interference with the existing properties, unintended visibility, or with other uncoordinated additions by any other code."},{"_id":"4916191365693440","category":"JavaScript","flag_name":null,"id":4916191365693440,"milestone":38,"name":"Set (ES6)","summary":"Set objects let you store unique values of any type, whether primitive values or object references. "},{"_id":"4818609708728320","category":"JavaScript","flag_name":null,"id":4818609708728320,"milestone":38,"name":"Map (ES6)","summary":"Map objects are simple key/value maps."},{"_id":"4696563918045184","category":"JavaScript","flag_name":null,"id":4696563918045184,"milestone":38,"name":"JS iterators (i.e. the for-of feature) (ES6)","summary":"Iterates over iterable objects (including arrays, array-like objects, iterators and generators), invoking a custom iteration hook with statements to be executed for the value of each distinct property."},{"_id":"5977677567623168","category":"JavaScript","flag_name":null,"id":5977677567623168,"milestone":36,"name":"WeakSet (ES6)","summary":"ES6 WeakSets are sets of arbitrary JavaScript objects, that hold on to their keys weakly"},{"_id":"4572868859920384","category":"JavaScript","flag_name":null,"id":4572868859920384,"milestone":36,"name":"WeakMap (ES6)","summary":"WeakMaps are key/value maps in which keys are objects."},{"_id":"6416612420747264","category":"JavaScript","flag_name":null,"id":6416612420747264,"milestone":10,"name":"Runtime error reporting: ErrorEvent.","summary":"Unhandled exceptions trigger the 'window.onerror' callback (or 'self.onerror' inside Workers) for centralized handling."},{"_id":"4959347197083648","category":"JavaScript","flag_name":null,"id":4959347197083648,"milestone":39,"name":"Generators (ES6)","summary":"A generator is a special type of function that works as a factory for iterators."},{"_id":"5681726336532480","category":"JavaScript","flag_name":null,"id":5681726336532480,"milestone":32,"name":"Promises (ES6)","summary":"Using V8 Promises."},{"_id":"5099433642950656","category":"WebAssembly","flag_name":"","id":5099433642950656,"milestone":115,"name":"8MB Limit for WebAssembly.Module() on the Main Thread","summary":"Chrome has extended the size limit on synchronous WebAssembly compilation on the main thread from 4KB to 8MB. This extension is possible thanks to improvements in the WebAssembly runtime V8. The 8MB limit has been determined through performance measurements on a Google Pixel 1 phone, which is currently considered a representative low-end phone. Future developments in V8 or in hardware may allow to extend the limit further. WebAssembly modules that are bigger than 8MB can be compiled asynchronously with WebAssembly.compile(), or sychronously on a Worker."},{"_id":"5166497248837632","category":"WebAssembly","flag_name":"","id":5166497248837632,"milestone":96,"name":"WebAssembly Reference Types","summary":"Allow WebAssembly modules to hold references to JS/DOM objects, passing them as arguments, storing them in locals and globals, and storing them in WebAssembly.Table objects.\r\n"}]}